from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from config import ADMINS, REQUIRED_CHAT_ID
from database.db import get_connection
from aiogram.filters.command import Command
from aiogram.utils.markdown import hbold
from handlers.booking import notify_admins_about_booking
import calendar

router = Router()


def get_existing_training_dates() -> set[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—ã —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏) –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'."""
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT date FROM trainings WHERE status = 'open'")
        results = cursor.fetchall()
    return {datetime.fromisoformat(row[0]).date().isoformat() for row in results}


def build_calendar(year: int, month: int) -> InlineKeyboardMarkup:
    now = datetime.now()
    today = now.date()
    existing_dates = get_existing_training_dates()

    calendar.setfirstweekday(calendar.MONDAY)
    month_calendar = calendar.monthcalendar(year, month)

    markup = []

    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    markup.append([InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="ignore")])

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    markup.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in days])

    for week in month_calendar:
        row = []
        for i, day in enumerate(week):
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
                continue

            date_obj = datetime(year, month, day).date()
            if i in (1, 5) and date_obj >= today:
                date_str = date_obj.isoformat()
                label = f"{day}"
                if date_str in existing_dates:
                    label += "‚úÖ"
                callback_data = f"date:{date_str}"
                row.append(InlineKeyboardButton(text=label, callback_data=callback_data))
            else:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
        markup.append(row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    nav_buttons = []
    base_month = datetime(datetime.now().year, datetime.now().month, 1)
    this_month = datetime(year, month, 1)

    if this_month > base_month:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"cal:{prev_year}:{prev_month}"))
    nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"cal:{next_year}:{next_month}"))
    markup.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=markup)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–≥–æ Telegram ID
@router.message(F.text == "/id")
async def get_id(message: Message):
    await message.answer(f"ü™™ –¢–≤–æ–π Telegram ID: <code>{message.from_user.id}</code>")

#–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@router.message(F.text == "/users")
async def list_users(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT user_id, nickname, system, subscription
            FROM users
            ORDER BY user_id
        """)
        users = cursor.fetchall()

    if not users:
        await message.answer("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    lines = ["üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"]
    for user_id, nickname, system, subscription in users:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –∏ –ø–æ–ª–Ω–æ–µ –∏–º—è
        chat_member = await message.bot.get_chat_member(chat_id=user_id, user_id=user_id)
        full_name = chat_member.user.full_name
        username = chat_member.user.username

        user_link = f"@{username}" if username else f"<a href='tg://user?id={user_id}'>{full_name}</a>"

        lines.append(
            f"{user_link} | ID: <code>{user_id}</code>\n"
            f"üéÆ OSD: {nickname}\n"
            f"üé• –°–∏—Å—Ç–µ–º–∞: {system}\n"
            f"üéü –ê–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {subscription}\n"
            f"---"
        )

    await message.answer("\n".join(lines), parse_mode="HTML")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@router.message(F.text == "/new_training")
async def show_calendar(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    now = datetime.now()
    await send_calendar(message, now.year, now.month)


@router.callback_query(F.data.startswith("cal:"))
async def navigate_calendar(callback: CallbackQuery):
    _, year, month = callback.data.split(":")
    year = int(year)
    month = int(month)

    keyboard = build_calendar(year, month)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("date:"))
async def create_training(callback: CallbackQuery):
    _, date_str = callback.data.split(":", 1)
    selected_date = datetime.strptime(date_str, "%Y-%m-%d")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—Ç–æ—Ä–Ω–∏–∫–∞ –∏–ª–∏ —Å—É–±–±–æ—Ç—ã
    if selected_date.weekday() == 1:  # –≤—Ç–æ—Ä–Ω–∏–∫
        dt = selected_date.replace(hour=19, minute=0)
    elif selected_date.weekday() == 5:  # —Å—É–±–±–æ—Ç–∞
        dt = selected_date.replace(hour=16, minute=0)
    else:
        await callback.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ —Å—É–±–±–æ—Ç—É", show_alert=True)
        return

    with get_connection() as conn:
        cursor = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        cursor.execute("INSERT INTO trainings (date, status) VALUES (?, ?)", (dt.isoformat(), "open"))
        training_id = cursor.lastrowid
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –¥–≤—É—Ö –∞–¥–º–∏–Ω–æ–≤
        now = datetime.now().isoformat()
        admin_slots = [
            (training_id, 932407372, 'fast', 'R1'),
            (training_id, 132536948, 'fast', 'L1')
        ]
        for training_id, admin_id, group, channel in admin_slots:
            cursor.execute("""
                INSERT INTO slots (training_id, user_id, group_name, channel, status, created_at, payment_type)
                VALUES (?, ?, ?, ?, 'confirmed', ?, 'admin')
            """, (training_id, admin_id, group, channel, now))

        conn.commit()

    await callback.message.edit_text(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {dt.strftime('%d.%m.%Y %H:%M')}")
    await callback.answer()


async def send_calendar(target, year: int, month: int):
    text = f"üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ({calendar.month_name[month]} {year})"
    kb = build_calendar(year, month)
    if isinstance(target, Message):
        await target.answer(text, reply_markup=kb)
    else:
        await target.edit_text(text, reply_markup=kb)


#–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤


@router.message(Command("add_subscription"))
async def add_subscription_command(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    parts = message.text.strip().split()
    if len(parts) != 3:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add_subscription <user_id> <–∫–æ–ª-–≤–æ>")
        return

    try:
        target_user_id = int(parts[1])
        count = int(parts[2])
        if count <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT nickname FROM users WHERE user_id = ?", (target_user_id,))
        row = cursor.fetchone()

    if not row:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    nickname = row[0]

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_add_sub:{target_user_id}:{count}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add_sub")
        ]
    ])
    await message.answer(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å {count} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{nickname}</b> (ID: <code>{target_user_id}</code>)?",
        reply_markup=kb
    )


@router.callback_query(F.data.startswith("confirm_add_sub:"))
async def confirm_add_subscription(callback: CallbackQuery):
    _, user_id_str, count_str = callback.data.split(":")
    user_id = int(user_id_str)
    count = int(count_str)

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET subscription = subscription + ? WHERE user_id = ?", (count, user_id))
        cursor.execute("SELECT nickname FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        conn.commit()

    nickname = row[0] if row else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await callback.message.edit_text(
        f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {count} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{nickname}</b> (ID: <code>{user_id}</code>)."
    )
    await callback.answer()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            user_id,
            f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{count}</b> –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –±–µ–∑ –æ–ø–ª–∞—Ç—ã."
        )
    except Exception as e:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –±–æ—Ç–∞, –ª–æ–≤–∏–º –æ—à–∏–±–∫—É
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")


@router.callback_query(F.data == "cancel_add_sub")
async def cancel_add_subscription(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


#–æ—Ç–º–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏    
@router.message(Command("cancel_training"))
async def cancel_training(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    now = datetime.now().isoformat()

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, date FROM trainings
            WHERE status = 'open' AND datetime(date) > ?
            ORDER BY date ASC
        """, (now,))
        rows = cursor.fetchall()

    if not rows:
        await message.answer("‚ùå –ù–µ—Ç –±—É–¥—É—â–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=datetime.fromisoformat(date).strftime("%d.%m %H:%M"),
            callback_data=f"cancel_train:{training_id}"
        )]
        for training_id, date in rows
    ])

    await message.answer("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("cancel_train:"))
async def confirm_training_cancel(callback: CallbackQuery):
    training_id = int(callback.data.split(":")[1])

    with get_connection() as conn:
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        cursor.execute("SELECT date FROM trainings WHERE id = ?", (training_id,))
        row = cursor.fetchone()
        if not row:
            await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        date_str = datetime.fromisoformat(row[0]).strftime("%d.%m.%Y %H:%M")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        cursor.execute("""
            SELECT s.user_id, s.status
            FROM slots s
            WHERE s.training_id = ?
        """, (training_id,))
        participants = cursor.fetchall()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        cursor.execute("UPDATE trainings SET status = 'cancelled' WHERE id = ?", (training_id,))
        conn.commit()

    # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for user_id, status in participants:
        try:
            if status == "confirmed":
                # –í–æ–∑–≤—Ä–∞—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                with get_connection() as conn:
                    conn.execute(
                        "UPDATE users SET subscription = subscription + 1 WHERE user_id = ?", (user_id,)
                    )
                await callback.bot.send_message(
                    user_id,
                    f"‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {date_str} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\nüéü –í–∞–º –≤–æ–∑–≤—Ä–∞—â—ë–Ω 1 –∞–±–æ–Ω–µ–º–µ–Ω—Ç."
                )
            else:
                await callback.bot.send_message(
                    user_id,
                    f"‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {date_str} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
                )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await callback.message.edit_text(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {date_str} –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
    await callback.answer()


#–ø–æ–¥—Å–∫–∞–∑–∫–∏

@router.message(F.text == "/admin")
async def admin_help(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    help_text = (
        "üõ† <b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üìã <b>/users</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üìÖ <b>/new_training</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n"
        "–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ —Å—É–±–±–æ—Ç—É.\n"
        "‚ûï <b>/add_subscription &lt;user_id&gt; &lt;–∫–æ–ª-–≤–æ&gt;</b> ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "üí° –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã <code>/add_subscription</code> –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º.\n"
        "\n"
        "<b>/cancel_training</b> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "‚ÄÉ‚ÄÉ‚õî –û—Ç–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚ÄÉ‚ÄÉüîÅ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 1 –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
        "ü™™<b>/id</b> ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID\n"
        "üöí<b>/progrev</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤ –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö\n"
        "üîÅ<b>/resend_pending</b> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ—Ç –ª–∏ –∑–∞–ª–∏–ø—à–∏—Ö —Å–ª–æ—Ç–æ–≤\n"
        "\n"
    )

    await message.answer(help_text, parse_mode="HTML")

admin_router = Router()

@admin_router.message(Command("resend_pending"))
async def resend_pending_handler(message: Message, bot: Bot):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT s.id, s.training_id, s.user_id, s.group_name, s.channel, s.payment_type, s.created_at,
                   t.date, u.nickname, u.system
            FROM slots s
            JOIN trainings t ON s.training_id = t.id
            JOIN users u ON s.user_id = u.user_id
            WHERE s.status = 'pending'
              AND NOT EXISTS (
                SELECT 1 FROM admin_notifications n WHERE n.slot_id = s.id
              )
        """)
        slots = cursor.fetchall()

    if not slots:
        await message.answer("‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    sent_count = 0

    for row in slots:
        slot_id, training_id, user_id, group, channel, payment_type, _, training_date, _, _, = row

        try:
            chat_member = await bot.get_chat_member(chat_id=user_id, user_id=user_id)
            username = chat_member.user.username
            full_name = chat_member.user.full_name
        except:
            full_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            username = None

        await notify_admins_about_booking(
            bot=bot,
            training_id=training_id,
            user_id=user_id,
            group=group,
            channel=channel,
            slot_id=slot_id,
            username=username,
            payment_type=payment_type,
            full_name=full_name,
            date_str=training_date
        )
        sent_count += 1

    await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ {sent_count} —Å–ª–æ—Ç—É(–∞–º).")

@admin_router.message(F.text == "/progrev")
async def send_progrev_message(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    now = datetime.now()
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, date FROM trainings
            WHERE status = 'open' AND date > ?
            ORDER BY date
            LIMIT 1
        """, (now.isoformat(),))
        training = cursor.fetchone()

    if not training:
        await message.answer("‚ùå –ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return

    training_id, date_str = training
    date_fmt = datetime.fromisoformat(date_str).strftime("%d.%m.%Y %H:%M")

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT group_name, COUNT(*) 
            FROM slots 
            WHERE training_id = ? AND status IN ('confirmed')
            GROUP BY group_name
        """, (training_id,))
        counts = dict(cursor.fetchall())

    fast_free = 7 - counts.get("fast", 0)
    standard_free = 7 - counts.get("standard", 0)
    fast_label = f"{fast_free} –º–µ—Å—Ç" if fast_free > 0 else "–º–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"
    standard_label = f"{standard_free} –º–µ—Å—Ç" if standard_free > 0 else "–º–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"

    text = (
        f"üî• <b>–û—Å—Ç–∞–ª–∏—Å—å –º–µ—Å—Ç–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!</b>\n"
        f"üìÖ <b>{date_fmt}</b>\n\n"
        f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥—Ä—É–ø–ø–∞: <b>{fast_label}</b>\n"
        f"üèÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: <b>{standard_label}</b>\n\n"
        f"üöÄ –£—Å–ø–µ–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –ø–æ–∫–∞ –µ—Å—Ç—å –º–µ—Å—Ç–∞!"
    )

    await message.bot.send_message(REQUIRED_CHAT_ID, text, parse_mode="HTML")
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –∫–ª—É–±–∞.")
